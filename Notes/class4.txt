Set10 Second Class 4

• CLASS OBJECTIVES
1. String Methods

STRING METHODS OVERVIEW.
1. charAt(index): Returns the character at the specified index.
2. charCodeAt(index): Returns the Unicode of the character at the specified index.
3. codePointAt(index): Returns a non-negative integer that is the Unicode code point value.
4. concat(string2, string3, ..., stringN): Combines the text of two or more strings and returns a new string.
5.includes(searchString, position): Determines whether the string contains the characters of a specified string.
6.endsWith(searchString, length): Determines whether the string ends with the characters of a specified string.
7. indexOf(searchValue, fromIndex): Returns the index of the first occurrence of the specified value.
8. lastIndexOf(searchValue, fromIndex): Returns the index of the last occurrence of the specified value.
9. localeCompare(compareString, locales, options): Returns a number indicating whether a reference string comes before 10. or after or is the same as the given string in sort order.
11. match(regexp): Retrieves the matches when matching a string against a regular expression.
12. matchAll(regexp): Returns an iterator of all results matching a string against a regular expression, including capturing groups.
13. normalize(form): Returns the Unicode Normalization Form of the string.
14. padEnd(targetLength, padString): Pads the current string from the end with a given string until the resulting string reaches the given length.
15. padStart(targetLength, padString): Pads the current string from the start with a given string until the resulting string reaches the given length.
16. repeat(count): Returns a new string with a specified number of copies of an existing string.
17. replace(searchValue, newValue): Replaces a specified value with another value in a string.
18.replaceAll(searchValue, newValue): Replaces all occurrences of a specified value with another value in a string.
19. search(regexp): Searches a string for a specified value and returns the position of the match.
20. slice(beginIndex, endIndex): Extracts a section of a string and returns it as a new string.
21. split(separator, limit): Splits a string into an array of substrings.
22. startsWith(searchString, position): Determines whether the string starts with the characters of a specified string.
23. substring(start, end): Returns a part of the string between the start and end indexes.
24. toLocaleLowerCase(locale): Converts the string to lowercase letters according to any locale-specific case mappings.
25. toLocaleUpperCase(locale): Converts the string to uppercase letters according to any locale-specific case mappings.
26. toLowerCase(): Converts the string to lowercase letters.
27. toUpperCase(): Converts the string to uppercase letters.
28. trim(): Removes whitespace from both ends of a string.
29. trimEnd() or trimRight(): Removes whitespace from the end of a string.
30. trimStart() or trimLeft(): Removes whitespace from the beginning of a string.
31. valueOf(): Returns the primitive value of a String object.

• JAVASCRIPT ASSIGNMENT

1. Extract, Transform, and Reconstruct
Given the string const sentence = "The quick brown fox jumps over the lazy dog";
Extract the word "brown", convert it to uppercase, remove the word "lazy", and replace the word "dog" with the extracted word.

2. Domain and Username Extraction
Given the string const email = "Student.Name@SchoolDomain.com";
Extract the domain, convert it to lowercase, extract the username (part before "@"), convert the username to uppercase, and then concatenate them in the format "USERNAME@domain".

3. Clean, Count, and Extract
Given the string const messyString = " Too many spaces here. ";
Trim the string, find its length, and then extract a substring from the 5th character to the length minus 5 characters.

4. Complex Word Replacement
Given the string const phrase = "I like to code in JavaScript. JavaScript is fun!";
Replace the first occurrence of "JavaScript" with "JS", replace all remaining occurrences of "JavaScript" with "JS", convert the entire string to uppercase, and then extract a substring from the 10th character to the 30th character.

5. Character Manipulation
Given the string const text = "Programming is highly rewarding";
Retrieve the character at the 10th position, find its Unicode value, replace all occurrences of the character "g" with the Unicode character, and then slice the string from the 8th character to the 28th character.

6. Complex String Joining
Given the strings const firstName = "Jane";, const middleName = "Marie";, and const lastName = "Smith";
Concatenate these strings with a space in between, convert the result to uppercase, find the index of the letter "M", and replace "Marie" with "Ann".

7. Sentence Start and End Analysis
Given the string const statement = "JavaScript is a versatile and popular programming language";
Check if the statement starts with "JavaScript", ends with "language", replace "versatile" with "powerful", and convert the resulting string to lowercase.

8. Substring Manipulation

Given the string const description = "Backend development involves working with databases, servers, and APIs";
Extract the substring "databases, servers, and APIs", convert it to lowercase, split it into an array by commas, and join the array with " & " instead of commas.

9. Word Split and Count
Given the string const announcement = "Join the new online coding bootcamp now";
Split the string into an array of words, find the length of each word, join the lengths into a string separated by commas, and then find the index of the first occurrence of the length "5".

10. Substring Replacement and Case Change
Given the string const feedback = "This course is simply amazing. This course is simply comprehensive."
Replace all occurrences of "course" with "program", convert the entire string to uppercase, slice the string from the 5th character to the 55th character, and then split it into an array by spaces.

